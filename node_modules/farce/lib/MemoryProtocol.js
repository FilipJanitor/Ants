'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _createPath = require('./utils/createPath');

var _createPath2 = _interopRequireDefault(_createPath);

var _ensureLocation = require('./utils/ensureLocation');

var _ensureLocation2 = _interopRequireDefault(_ensureLocation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var STATE_KEY = '@@farce/state';

var MemoryProtocol = function () {
  function MemoryProtocol(initialLocation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$persistent = _ref.persistent,
        persistent = _ref$persistent === undefined ? false : _ref$persistent;

    _classCallCheck(this, MemoryProtocol);

    this._persistent = persistent;

    var initialState = persistent ? this._loadState() : null;
    if (initialState) {
      this._stack = initialState.stack;
      this._index = initialState.index;
    } else {
      this._stack = [(0, _ensureLocation2.default)(initialLocation)];
      this._index = 0;
    }

    this._keyPrefix = Math.random().toString(36).slice(2, 8);
    this._keyIndex = 0;

    this._listener = null;
  }

  MemoryProtocol.prototype._loadState = function _loadState() {
    try {
      var _JSON$parse = JSON.parse(window.sessionStorage.getItem(STATE_KEY)),
          stack = _JSON$parse.stack,
          index = _JSON$parse.index;

      // Check that the stack and index at least seem reasonable before using
      // them as state. This isn't foolproof, but it might prevent mistakes.


      if (Array.isArray(stack) && typeof index === 'number' && stack[index]) {
        return { stack: stack, index: index };
      }
    } catch (e) {} // eslint-disable-line no-empty

    return null;
  };

  MemoryProtocol.prototype.init = function init() {
    var delta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return _extends({}, this._stack[this._index], {
      action: 'POP',
      index: this._index,
      delta: delta
    });
  };

  MemoryProtocol.prototype.transition = function transition(location) {
    // Match BrowserProtocol here in only saving these fields.
    var action = location.action,
        pathname = location.pathname,
        search = location.search,
        hash = location.hash,
        state = location.state;


    var push = action === 'PUSH';
    !(push || action === 'REPLACE') ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Unrecognized memory protocol action ' + action + '.') : (0, _invariant2.default)(false) : void 0;

    var delta = push ? 1 : 0;
    this._index += delta;

    var keyIndex = this._keyIndex++;
    var key = this._keyPrefix + ':' + keyIndex.toString(36);

    this._stack[this._index] = { pathname: pathname, search: search, hash: hash, state: state, key: key };
    if (push) {
      this._stack.length = this._index + 1;
    }

    if (this._persistent) {
      this._saveState();
    }

    return _extends({}, location, { key: key, index: this._index, delta: delta });
  };

  MemoryProtocol.prototype.go = function go(delta) {
    var prevIndex = this._index;

    this._index = Math.min(Math.max(this._index + delta, 0), this._stack.length - 1);

    if (this._index === prevIndex) {
      return;
    }

    if (this._persistent) {
      this._saveState();
    }

    if (this._listener) {
      this._listener(this.init(this._index - prevIndex));
    }
  };

  MemoryProtocol.prototype._saveState = function _saveState() {
    try {
      window.sessionStorage.setItem(STATE_KEY, JSON.stringify({
        stack: this._stack,
        index: this._index
      }));
    } catch (e) {} // eslint-disable-line no-empty
  };

  MemoryProtocol.prototype.createHref = function createHref(location) {
    return (0, _createPath2.default)(location);
  };

  MemoryProtocol.prototype.subscribe = function subscribe(listener) {
    var _this = this;

    this._listener = listener;

    return function () {
      _this._listener = null;
    };
  };

  return MemoryProtocol;
}();

exports.default = MemoryProtocol;
module.exports = exports['default'];