'use strict';

exports.__esModule = true;
exports.default = createStoreHistory;

var _Actions = require('./Actions');

var _Actions2 = _interopRequireDefault(_Actions);

var _maybePromisify = require('./utils/maybePromisify');

var _maybePromisify2 = _interopRequireDefault(_maybePromisify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createStoreHistory(store) {
  var getLocation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (_ref) {
    var location = _ref.location;
    return location;
  };

  return {
    listen: function listen(listener) {
      var location = getLocation(store.getState());
      listener(location);

      return store.subscribe(function () {
        var nextLocation = getLocation(store.getState());

        if (nextLocation !== location) {
          listener(nextLocation);
          location = nextLocation;
        }
      });
    },
    listenBefore: function listenBefore(hook) {
      return store.farce.addTransitionHook((0, _maybePromisify2.default)(hook, 1));
    },
    push: function push(location) {
      store.dispatch(_Actions2.default.push(location));
    },
    replace: function replace(location) {
      store.dispatch(_Actions2.default.replace(location));
    },
    goBack: function goBack() {
      store.dispatch(_Actions2.default.go(-1));
    },
    goForward: function goForward() {
      store.dispatch(_Actions2.default.go(1));
    },
    go: function go(delta) {
      store.dispatch(_Actions2.default.go(delta));
    },
    createHref: function createHref(location) {
      return store.farce.createHref(location);
    },
    createLocation: function createLocation(location) {
      return store.farce.createLocation(location);
    },
    dispose: function dispose() {
      store.dispatch(_Actions2.default.dispose());
    },


    // For compatibility with React Router v2.x.
    __v2_compatible__: true
  };
}
module.exports = exports['default'];